library(tidyverse)
library(gganimate)
library(cowplot)
library(nflfastR)
library(transformr)
library(png)
library(grid)
library(imager)
# Load in tracking data
tracking <- read_csv("data/tracking_week_2.csv")
# Load in the games data
games <- read_csv("data/games.csv")
# Load in the plays data
plays <- read_csv("data/plays.csv")
# Read in tackles data
tackles <- read_csv("data/tackles.csv")
# Load in the team colors data
colors <- teams_colors_logos
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where possessionTeam == 'CHI' and playDescription contains 'touchdown'
chi_touchdown_plays <- tracking_full %>%
filter(possessionTeam == 'CHI' & str_detect(playDescription, regex("touchdown", ignore_case = TRUE)))
# Select a random play from the filtered data
# set.seed() is optional, for reproducibility
set.seed(138)
selected_play <- sample_n(chi_touchdown_plays, 1)
# Extract the gameId and playId of the random play
selected_gameId <- selected_play$gameId
selected_playId <- selected_play$playId
# Use the selected gameId and playId to extract the play data
example.play <- tracking_full %>%
filter(gameId == selected_gameId, playId == selected_playId)
# Check if the URL is valid
logo_url <- unique(na.omit(example.play$home_team_logo_wikipedia))[1]
if (!is.na(logo_url) & logo_url != "") {
download.file(logo_url, destfile = "logo.png", mode = "wb")
logo_img <- readPNG("logo.png")
# Ensure the image has 3 dimensions
if (length(dim(logo_img)) != 3) {
stop("The image must have 3 dimensions (height, width, color).")
}
# Rotate the image 90 degrees to the left
rotated_logo_img <- aperm(logo_img, c(2, 1, 3))
# Flip the image vertically to align it correctly
rotated_logo_img <- rotated_logo_img[dim(rotated_logo_img)[1]:1,,]
rotated_logo_grob <- rasterGrob(rotated_logo_img, interpolate=TRUE)
}
## General field boundaries
xmin <- 0
xmax <- 160/3
hash.right <- 38.35
hash.left <- 12
hash.width <- 3.3
mid_x <- (xmin + xmax) / 2
mid_y <- 60  # 50-yard line is midfield in y-axis
# Size of the logo, change these based on how big you want the logo to be
logo_width <- 15  # width of logo along x-axis
logo_height <- 15  # height of logo along y-axis
## Specific boundaries for a given play
ymin <- max(round(min(example.play$x, na.rm = TRUE) - 10, -1), 0)
ymax <- min(round(max(example.play$x, na.rm = TRUE) + 10, -1), 120)
df.hash <- expand.grid(x = c(0, 23.36667, 29.96667, xmax), y = (10:110))
df.hash <- df.hash %>% filter(!(floor(y %% 5) == 0))
df.hash <- df.hash %>% filter(y < ymax, y > ymin)
# Create a dataset where the line data is duplicated for each unique frame
line_data <- filter(example.play, tackle == 1) %>%
select(x, y, nflId, team_color, team_color2) %>%  # select additional columns you may need
crossing(frameId = unique(example.play$frameId))
# Complete animated plot
animate.play <- ggplot() +
# Football field background
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill = "#28B730", color = NA) +
annotation_custom(
rotated_logo_grob,
xmin = mid_x - (logo_width / 2),
xmax = mid_x + (logo_width / 2),
ymin = mid_y - (logo_height / 2),
ymax = mid_y + (logo_height / 2)
) +
# Hash marks, field boundary lines, numbers, outer boundary, etc.
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2, colour = "white") +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2, colour = "white") +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend = xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5), colour = "white") +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 7, family = 'century', colour = "white") +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 7, family = 'century',  colour = "white") +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "white") +
# Add the static line for the tackler's path
geom_line(data = line_data,
aes(x = (xmax - y), y = x),
color = "black", size = 1) +
# Players and their jersey numbers
geom_point(data = example.play, aes(x = (xmax-y), y = x,
fill = team_color, group = nflId, colour = team_color2), alpha = 1, shape = 21, size = 7, stroke = 2) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Player who made the tackle
geom_point(data = filter(example.play, tackle == 1),
aes(x = (xmax-y), y = x, fill = team_color),
shape = 21, color = "yellow", size = 8, stroke = 2, alpha = 1) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Football representation
geom_point(data = filter(example.play, club == 'football'), aes(x = (xmax-y), y = x),
fill = "brown", colour = "brown", alpha = 1, shape = 24, size = 3) +
# Explicitly define colors
scale_fill_identity() +
scale_color_identity() +
ylim(ymin, ymax) +
coord_fixed() +
theme_nothing() +
transition_time(frameId) +
ease_aes('linear') +
NULL
## Ensure timing of play matches 10 frames-per-second
play.length.ex <- length(unique(example.play$frameId))
animate(animate.play, fps = 10, nframe = play.length.ex)
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where tackle = 1
tackle_plays <- tracking_full %>%
filter(tackle == 1)
# Select a random play from the filtered data
#set.seed(138) # Optional, for reproducibility
selected_play <- sample_n(tackle_plays, 1)
# Extract the gameId and playId of the random play
selected_gameId <- selected_play$gameId
selected_playId <- selected_play$playId
# Use the selected gameId and playId to extract the play data
example.play <- tracking_full %>%
filter(gameId == 2022092501, playId == 552)
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where possessionTeam == 'CHI' and playDescription contains 'touchdown'
chi_touchdown_plays <- tracking_full %>%
filter(possessionTeam == 'CHI' & str_detect(playDescription, regex("touchdown", ignore_case = TRUE)))
# Select a random play from the filtered data
# set.seed() is optional, for reproducibility
set.seed(138)
selected_play <- sample_n(chi_touchdown_plays, 1)
# Extract the gameId and playId of the random play
selected_gameId <- selected_play$gameId
selected_playId <- selected_play$playId
# Use the selected gameId and playId to extract the play data
example.play <- tracking_full %>%
filter(gameId == selected_gameId, playId == selected_playId)
# Check if the URL is valid
logo_url <- unique(na.omit(example.play$home_team_logo_wikipedia))[1]
if (!is.na(logo_url) & logo_url != "") {
download.file(logo_url, destfile = "logo.png", mode = "wb")
logo_img <- readPNG("logo.png")
# Ensure the image has 3 dimensions
if (length(dim(logo_img)) != 3) {
stop("The image must have 3 dimensions (height, width, color).")
}
# Rotate the image 90 degrees to the left
rotated_logo_img <- aperm(logo_img, c(2, 1, 3))
# Flip the image vertically to align it correctly
rotated_logo_img <- rotated_logo_img[dim(rotated_logo_img)[1]:1,,]
rotated_logo_grob <- rasterGrob(rotated_logo_img, interpolate=TRUE)
}
## General field boundaries
xmin <- 0
xmax <- 160/3
hash.right <- 38.35
hash.left <- 12
hash.width <- 3.3
mid_x <- (xmin + xmax) / 2
mid_y <- 60  # 50-yard line is midfield in y-axis
# Size of the logo, change these based on how big you want the logo to be
logo_width <- 15  # width of logo along x-axis
logo_height <- 15  # height of logo along y-axis
## Specific boundaries for a given play
ymin <- max(round(min(example.play$x, na.rm = TRUE) - 10, -1), 0)
ymax <- min(round(max(example.play$x, na.rm = TRUE) + 10, -1), 120)
df.hash <- expand.grid(x = c(0, 23.36667, 29.96667, xmax), y = (10:110))
df.hash <- df.hash %>% filter(!(floor(y %% 5) == 0))
df.hash <- df.hash %>% filter(y < ymax, y > ymin)
# Create a dataset where the line data is duplicated for each unique frame
line_data <- filter(example.play, tackle == 1) %>%
select(x, y, nflId, team_color, team_color2) %>%  # select additional columns you may need
crossing(frameId = unique(example.play$frameId))
# Complete animated plot
animate.play <- ggplot() +
# Football field background
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill = "#28B730", color = NA) +
annotation_custom(
rotated_logo_grob,
xmin = mid_x - (logo_width / 2),
xmax = mid_x + (logo_width / 2),
ymin = mid_y - (logo_height / 2),
ymax = mid_y + (logo_height / 2)
) +
# Hash marks, field boundary lines, numbers, outer boundary, etc.
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2, colour = "white") +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2, colour = "white") +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend = xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5), colour = "white") +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 7, family = 'century', colour = "white") +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 7, family = 'century',  colour = "white") +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "white") +
# Add the static line for the tackler's path
geom_line(data = line_data,
aes(x = (xmax - y), y = x),
color = "black", size = 1) +
# Players and their jersey numbers
geom_point(data = example.play, aes(x = (xmax-y), y = x,
fill = team_color, group = nflId, colour = team_color2), alpha = 1, shape = 21, size = 7, stroke = 2) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Player who made the tackle
geom_point(data = filter(example.play, tackle == 1),
aes(x = (xmax-y), y = x, fill = team_color),
shape = 21, color = "yellow", size = 8, stroke = 2, alpha = 1) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Football representation
geom_point(data = filter(example.play, club == 'football'), aes(x = (xmax-y), y = x),
fill = "brown", colour = "brown", alpha = 1, shape = 24, size = 3) +
# Explicitly define colors
scale_fill_identity() +
scale_color_identity() +
ylim(ymin, ymax) +
coord_fixed() +
theme_nothing() +
transition_time(frameId) +
ease_aes('linear') +
NULL
## Ensure timing of play matches 10 frames-per-second
play.length.ex <- length(unique(example.play$frameId))
animate(animate.play, fps = 10, nframe = play.length.ex)
# Complete animated plot
animate.play <- ggplot() +
# Football field background
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill = "#28B730", color = NA) +
annotation_custom(
rotated_logo_grob,
xmin = mid_x - (logo_width / 2),
xmax = mid_x + (logo_width / 2),
ymin = mid_y - (logo_height / 2),
ymax = mid_y + (logo_height / 2)
) +
# Hash marks, field boundary lines, numbers, outer boundary, etc.
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2, colour = "white") +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2, colour = "white") +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend = xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5), colour = "white") +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 7, family = 'century', colour = "white") +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 7, family = 'century',  colour = "white") +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "white") +
# Add the static line for the tackler's path
geom_line(data = line_data,
aes(x = (xmax - y), y = x),
color = "black", size = 1) +
# Players and their jersey numbers
geom_point(data = example.play, aes(x = (xmax-y), y = x,
fill = team_color, group = nflId, colour = team_color2), alpha = 1, shape = 21, size = 7, stroke = 2) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Player who made the tackle
geom_point(data = filter(example.play, tackle == 1),
aes(x = (xmax-y), y = x, fill = team_color),
shape = 21, color = "yellow", size = 8, stroke = 2, alpha = 1) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Football representation
geom_point(data = filter(example.play, club == 'football'), aes(x = (xmax-y), y = x),
fill = "brown", colour = "brown", alpha = 1, shape = 24, size = 3) +
# Explicitly define colors
scale_fill_identity() +
scale_color_identity() +
ylim(ymin, ymax) +
coord_fixed() +
theme_nothing() +
transition_time(frameId) +
ease_aes('linear') +
NULL
## Ensure timing of play matches 10 frames-per-second
play.length.ex <- length(unique(example.play$frameId))
animate(animate.play, fps = 10, nframe = play.length.ex)
# Load in tracking data
tracking <- read_csv("data/tracking_week_4.csv")
# Load in the games data
games <- read_csv("data/games.csv")
# Load in the plays data
plays <- read_csv("data/plays.csv")
# Read in tackles data
tackles <- read_csv("data/tackles.csv")
# Load in the team colors data
colors <- teams_colors_logos
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where possessionTeam == 'CHI' and playDescription contains 'touchdown'
chi_touchdown_plays <- tracking_full %>%
filter(possessionTeam == 'CHI' & str_detect(playDescription, regex("touchdown", ignore_case = TRUE)))
# Select a random play from the filtered data
# set.seed() is optional, for reproducibility
set.seed(138)
selected_play <- sample_n(chi_touchdown_plays, 1)
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where possessionTeam == 'CHI' and playDescription contains 'touchdown'
chi_touchdown_plays <- tracking_full %>%
filter(possessionTeam == 'CHI' & str_detect(playDescription, regex("touchdown", ignore_case = TRUE)))
# Select a random play from the filtered data
# set.seed() is optional, for reproducibility
#set.seed(138)
selected_play <- sample_n(chi_touchdown_plays, 1)
# Load in tracking data
tracking <- read_csv("data/tracking_week_2.csv")
# Load in the games data
games <- read_csv("data/games.csv")
# Load in the plays data
plays <- read_csv("data/plays.csv")
# Read in tackles data
tackles <- read_csv("data/tackles.csv")
# Load in the team colors data
colors <- teams_colors_logos
# Modify the join to include home team's logo based on homeTeamAbbr
home_logos <- colors %>% select(team_abbr, team_logo_wikipedia) %>%
setNames(c("homeTeamAbbr", "home_team_logo_wikipedia"))
tracking_full <- tracking %>%
inner_join(games) %>%
inner_join(plays) %>%
left_join(colors, by = c("club" = "team_abbr")) %>%
left_join(tackles, by = c("gameId","playId","nflId")) %>%
left_join(home_logos, by = "homeTeamAbbr")
# Filter for plays where possessionTeam == 'CHI' and playDescription contains 'touchdown'
chi_touchdown_plays <- tracking_full %>%
filter(possessionTeam == 'CHI' & str_detect(playDescription, regex("touchdown", ignore_case = TRUE)))
# Select a random play from the filtered data
# set.seed() is optional, for reproducibility
#set.seed(138)
selected_play <- sample_n(chi_touchdown_plays, 1)
# Extract the gameId and playId of the random play
selected_gameId <- selected_play$gameId
selected_playId <- selected_play$playId
# Use the selected gameId and playId to extract the play data
example.play <- tracking_full %>%
filter(gameId == selected_gameId, playId == selected_playId)
# Check if the URL is valid
logo_url <- unique(na.omit(example.play$home_team_logo_wikipedia))[1]
if (!is.na(logo_url) & logo_url != "") {
download.file(logo_url, destfile = "logo.png", mode = "wb")
logo_img <- readPNG("logo.png")
# Ensure the image has 3 dimensions
if (length(dim(logo_img)) != 3) {
stop("The image must have 3 dimensions (height, width, color).")
}
# Rotate the image 90 degrees to the left
rotated_logo_img <- aperm(logo_img, c(2, 1, 3))
# Flip the image vertically to align it correctly
rotated_logo_img <- rotated_logo_img[dim(rotated_logo_img)[1]:1,,]
rotated_logo_grob <- rasterGrob(rotated_logo_img, interpolate=TRUE)
}
## General field boundaries
xmin <- 0
xmax <- 160/3
hash.right <- 38.35
hash.left <- 12
hash.width <- 3.3
mid_x <- (xmin + xmax) / 2
mid_y <- 60  # 50-yard line is midfield in y-axis
# Size of the logo, change these based on how big you want the logo to be
logo_width <- 15  # width of logo along x-axis
logo_height <- 15  # height of logo along y-axis
## Specific boundaries for a given play
ymin <- max(round(min(example.play$x, na.rm = TRUE) - 10, -1), 0)
ymax <- min(round(max(example.play$x, na.rm = TRUE) + 10, -1), 120)
df.hash <- expand.grid(x = c(0, 23.36667, 29.96667, xmax), y = (10:110))
df.hash <- df.hash %>% filter(!(floor(y %% 5) == 0))
df.hash <- df.hash %>% filter(y < ymax, y > ymin)
# Create a dataset where the line data is duplicated for each unique frame
line_data <- filter(example.play, tackle == 1) %>%
select(x, y, nflId, team_color, team_color2) %>%  # select additional columns you may need
crossing(frameId = unique(example.play$frameId))
# Complete animated plot
animate.play <- ggplot() +
# Football field background
geom_rect(aes(xmin = xmin, xmax = xmax, ymin = ymin, ymax = ymax), fill = "#28B730", color = NA) +
annotation_custom(
rotated_logo_grob,
xmin = mid_x - (logo_width / 2),
xmax = mid_x + (logo_width / 2),
ymin = mid_y - (logo_height / 2),
ymax = mid_y + (logo_height / 2)
) +
# Hash marks, field boundary lines, numbers, outer boundary, etc.
annotate("text", x = df.hash$x[df.hash$x < 55/2],
y = df.hash$y[df.hash$x < 55/2], label = "_", hjust = 0, vjust = -0.2, colour = "white") +
annotate("text", x = df.hash$x[df.hash$x > 55/2],
y = df.hash$y[df.hash$x > 55/2], label = "_", hjust = 1, vjust = -0.2, colour = "white") +
annotate("segment", x = xmin,
y = seq(max(10, ymin), min(ymax, 110), by = 5),
xend = xmax,
yend = seq(max(10, ymin), min(ymax, 110), by = 5), colour = "white") +
annotate("text", x = rep(hash.left, 11), y = seq(10, 110, by = 10),
label = c("G   ", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "   G"),
angle = 270, size = 7, family = 'century', colour = "white") +
annotate("text", x = rep((xmax - hash.left), 11), y = seq(10, 110, by = 10),
label = c("   G", seq(10, 50, by = 10), rev(seq(10, 40, by = 10)), "G   "),
angle = 90, size = 7, family = 'century',  colour = "white") +
annotate("segment", x = c(xmin, xmin, xmax, xmax),
y = c(ymin, ymax, ymax, ymin),
xend = c(xmin, xmax, xmax, xmin),
yend = c(ymax, ymax, ymin, ymin), colour = "white") +
# Add the static line for the tackler's path
geom_line(data = line_data,
aes(x = (xmax - y), y = x),
color = "black", size = 1) +
# Players and their jersey numbers
geom_point(data = example.play, aes(x = (xmax-y), y = x,
fill = team_color, group = nflId, colour = team_color2), alpha = 1, shape = 21, size = 7, stroke = 2) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Player who made the tackle
geom_point(data = filter(example.play, tackle == 1),
aes(x = (xmax-y), y = x, fill = team_color),
shape = 21, color = "yellow", size = 8, stroke = 2, alpha = 1) +
geom_text(data = example.play, aes(x = (xmax-y), y = x, label = jerseyNumber), colour = "white", vjust = 0.36, size = 3.5, family = 'arial') +
# Football representation
geom_point(data = filter(example.play, club == 'football'), aes(x = (xmax-y), y = x),
fill = "brown", colour = "brown", alpha = 1, shape = 24, size = 3) +
# Explicitly define colors
scale_fill_identity() +
scale_color_identity() +
ylim(ymin, ymax) +
coord_fixed() +
theme_nothing() +
transition_time(frameId) +
ease_aes('linear') +
NULL
## Ensure timing of play matches 10 frames-per-second
play.length.ex <- length(unique(example.play$frameId))
animate(animate.play, fps = 10, nframe = play.length.ex)
anim_save("animated_plot.gif", animate.play)
